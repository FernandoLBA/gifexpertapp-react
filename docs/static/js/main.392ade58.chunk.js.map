{"version":3,"sources":["components/AddCategory.js","components/Footer.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","placeholder","Footer","year","Date","getFullYear","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","substr","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"+KAIaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAGTC,mBAAU,IAHD,mBAGvCC,EAHuC,KAG3BC,EAH2B,KAoB/C,OACU,sBAAMC,SAZK,SAAEC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAe,SAAAS,GAAU,OAAMP,GAAN,mBAAqBO,OAE9CN,EAAe,MAKf,SACK,uBACKO,KAAK,OACLC,MAAQT,EACRU,SApBM,SAAEP,GACvBF,EAAeE,EAAEQ,OAAOF,QAoBTG,YAAY,yBCjBtBC,EAXA,WAEV,IAAMC,GAAO,IAAIC,MAAOC,cAExB,OACK,iCACK,oEAAwCF,EAAxC,U,+BCRFG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGZC,EAHY,iDAGqCC,UAAWH,GAHhD,+DAMCI,MAAOF,GANR,cAMZG,EANY,gBAOKA,EAAKC,OAPV,uBAOVC,EAPU,EAOVA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAb1B,kBAiBXM,GAjBW,4CAAH,sDCaLO,EAXK,SAAC,GAAqB,IAAlBH,EAAiB,EAAjBA,MAAMV,EAAW,EAAXA,IAEzB,OACK,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAI,QAErB,8BAAKN,EAAMO,OAAQ,EAAE,IAArB,aCHDC,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECFb,SAAEA,GAAe,IAAD,EAEbnB,mBAAS,CAC9B0B,KAAM,GACNc,SAAS,IAJyB,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAiBvC,OAVAC,qBAAW,WACNzB,EAASC,GACHyB,MAAM,SAAAC,GACFH,EAAS,CACJhB,KAAMmB,EACNL,SAAS,SAG1B,CAAErB,IAEEsB,EDb0BK,CAAc3B,GAAlCa,EAFuB,EAE5BN,KAAac,EAFe,EAEfA,QAErB,OACK,qCACK,6BAAMrB,IACJqB,GAAW,mBAAGL,UAAU,oCAAb,yBACb,qBAAKA,UAAU,YAAf,SAEUH,EAAOJ,KAAK,SAAAC,GAAG,OACV,cAAC,EAAD,eAEUA,GADCA,EAAIC,aEoC9BiB,G,KA9Ca,WAAM,MAOO/C,mBAAU,IAPjB,mBAOtBQ,EAPsB,KAOVT,EAPU,KA2B7B,OACK,qCACK,2CAAa,2CACb,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEUS,EAAWoB,KAAK,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEKA,SAAWA,GADLA,QAM1B,cAAC,EAAD,SC1Cf6B,IAASC,OACD,cAAC,EAAD,IACAC,SAASC,eAAe,U","file":"static/js/main.392ade58.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n     // Creamos un hook\r\n     const [ inputValue, setInputValue ] = useState( '' );\r\n\r\n     const handleInputChange = ( e ) => {\r\n          setInputValue( e.target.value );\r\n     };\r\n\r\n     const handleSubmit = ( e ) => {\r\n          e.preventDefault();\r\n\r\n          if ( inputValue.trim().length > 1 ) {\r\n               // coloca el inputValue primero\r\n               setCategories( categories => [ inputValue, ...categories ] );\r\n               // limpia borra el input\r\n               setInputValue( '' );\r\n          };\r\n     };\r\n\r\n     return (\r\n               <form onSubmit={ handleSubmit }>\r\n                    <input\r\n                         type=\"text\"\r\n                         value={ inputValue }\r\n                         onChange={ handleInputChange }\r\n                         placeholder=\"Busque aquí...\"\r\n                    />\r\n               </form>\r\n     );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n     setCategories: PropTypes.func.isRequired\r\n};","import React from 'react'\r\n\r\nconst Footer = () => {\r\n\r\n     const year = new Date().getFullYear();\r\n\r\n     return (\r\n          <footer>\r\n               <p>Desarrollada por: Fernando Barrios { year }.</p>\r\n          </footer>\r\n     )\r\n}\r\n\r\nexport default Footer\r\n","export const getGifs = async( category ) => {\r\n            \r\n     // Colocamos la url completa que copiamos de postman\r\n     const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=zrmAEen6j0ZdRx1eJEgT2Oyc5VCuwLNW`;\r\n\r\n     // Hacemos el fetc a la url de la API\r\n     const resp = await fetch( url );\r\n     const { data } = await resp.json();\r\n\r\n     const gifs = data.map( img => {\r\n          return {\r\n               id: img.id,\r\n               title: img.title,\r\n               url: img.images?.downsized_medium.url\r\n          };\r\n     });\r\n\r\n     return gifs;\r\n};","import React from 'react';\r\n\r\nconst GifGridItem = ( { title,url } ) => {\r\n\r\n     return (\r\n          <div className=\"card animate__animated animate__zoomIn\">\r\n              <img src={ url } alt=\"gif\"></img>\r\n              {/* limita el contenido del texto */}\r\n              <p>{ title.substr( 0,15 ) }...</p>\r\n          </div>\r\n     );\r\n};\r\n\r\nexport default GifGridItem;\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n     const { data:images, loading } = useFetchGifs( category );\r\n\r\n     return (\r\n          <>\r\n               <h2>{ category }</h2>\r\n               { loading && <p className=\"animate__animated animate__fadeIn\">Cargando...</p>}\r\n               <div className=\"card-grid\">\r\n                    {\r\n                         images.map( img => (\r\n                              <GifGridItem\r\n                                   key={ img.id }\r\n                                   { ...img }\r\n                              />\r\n                         ))\r\n                    }\r\n               </div>\r\n          </>\r\n     );\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n     const [state, setState] = useState({\r\n          data: [],\r\n          loading: true\r\n     });\r\n\r\n     useEffect( () => {\r\n          getGifs( category )\r\n               .then( imgs => {\r\n                    setState({\r\n                         data: imgs,\r\n                         loading: false\r\n                    })\r\n               });\r\n     }, [ category ]);\r\n\r\n     return state;\r\n}","import React, { Fragment, useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport Footer from './components/Footer';\r\nimport { GifGrid } from './components/GifGrid';\r\nimport './index.css';\r\n\r\n// Creamos el functional component\r\nexport const GifExpertApp = () => {\r\n\r\n     // lista de categorías:\r\n\r\n     // Usamos un Hook\r\n     // const [categories, setCategories] = useState( [ 'One Punch', 'Samurai X', 'Dragon ball Z' ] );\r\n\r\n     const [categories, setCategories] = useState( [] );\r\n\r\n     // TAREA\r\n     // Al oprimir el botón agregar, debe agregar un nuevo \r\n     // elemento al arreglo.\r\n     // const handleAdd = () => {\r\n          \r\n     //      const valor = 'Caballeros del Zodíaco';\r\n\r\n     //      // En lugar de usar push, agregamos el nuevo valor de \r\n     //      // la siguiente manera, carga la copia del arreglo \r\n     //      // cateogies mediante el spread operator y luego le \r\n     //      // agrega un valor nuevo después o antes de la copia.\r\n     //      // setCategories( [...categories, valor] ); \r\n\r\n     //      // otra forma con arrow function:\r\n     //      setCategories( categories => [ ...categories, valor ] );\r\n          \r\n     // };\r\n\r\n     return (\r\n          <>\r\n               <h1>GifExpert<span>App.</span></h1>\r\n               <AddCategory setCategories={ setCategories }/>\r\n               <ol>\r\n                    {\r\n                         categories.map( category => (\r\n                              <GifGrid \r\n                                   key={ category }\r\n                                   category={ category }\r\n                              />\r\n                         ) )\r\n                    }\r\n               </ol>\r\n               <Footer />\r\n          </>\r\n     );\r\n};\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n        <GifExpertApp />,\n        document.getElementById('root')\n);"],"sourceRoot":""}